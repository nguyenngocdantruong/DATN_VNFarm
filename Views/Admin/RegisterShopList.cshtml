@model RegisterShopListViewModel

@{
    Layout = "_LayoutAdmin";
}

<!-- Start Page Content -->
<div class="page-content">
    <!-- Start Container Fluid -->
    <div class="container-xxl">
        <div class="row">
            <div class="col-12">
                <div class="row">
                    <div class="col-xl-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="flex-grow-1">
                                        <h4 class="mb-2 fw-semibold">Tổng Yêu Cầu</h4>
                                        <h5 class="text-muted fs-14 mb-0">Số lượng yêu cầu đăng ký</h5>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <div class="avatar-sm">
                                            <span class="avatar-title bg-primary-subtle text-primary rounded-circle fs-3">
                                                <i class="bx bx-store"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="pt-4">
                                    <h2 class="counter-value" id="total-requests">0</h2>
                                    <p class="text-muted mb-0">Yêu cầu mới trong tháng</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="flex-grow-1">
                                        <h4 class="mb-2 fw-semibold">Chờ Duyệt</h4>
                                        <h5 class="text-muted fs-14 mb-0">Đang xử lý</h5>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <div class="avatar-sm">
                                            <span class="avatar-title bg-warning-subtle text-warning rounded-circle fs-3">
                                                <i class="bx bx-time"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="pt-4">
                                    <h2 class="counter-value" id="pending-requests">0</h2>
                                    <p class="text-muted mb-0">Yêu cầu cần xử lý</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="flex-grow-1">
                                        <h4 class="mb-2 fw-semibold">Đã Duyệt</h4>
                                        <h5 class="text-muted fs-14 mb-0">Shop đã được phê duyệt</h5>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <div class="avatar-sm">
                                            <span class="avatar-title bg-success-subtle text-success rounded-circle fs-3">
                                                <i class="bx bx-check-circle"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="pt-4">
                                    <h2 class="counter-value" id="approved-requests">0</h2>
                                    <p class="text-muted mb-0">Shop đã hoạt động</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-3 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="flex-grow-1">
                                        <h4 class="mb-2 fw-semibold">Từ Chối</h4>
                                        <h5 class="text-muted fs-14 mb-0">Yêu cầu không đạt</h5>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <div class="avatar-sm">
                                            <span class="avatar-title bg-danger-subtle text-danger rounded-circle fs-3">
                                                <i class="bx bx-x-circle"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="pt-4">
                                    <h2 class="counter-value" id="rejected-requests">0</h2>
                                    <p class="text-muted mb-0">Yêu cầu bị từ chối</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header d-flex align-items-center">
                        <h5 class="card-title flex-grow-1 mb-0">Danh Sách Yêu Cầu Đăng Ký Shop</h5>
                        <div class="flex-shrink-0">
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-soft-primary btn-sm">
                                    <i class="bx bx-export me-1"></i> Xuất Excel
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <input type="text" class="form-control" id="request-search-input" placeholder="Tìm kiếm theo tên shop...">
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="request-status-filter">
                                    <option value="-999" selected>Tất Cả Trạng Thái</option>
                                    <!-- Sẽ được điền bởi JavaScript -->
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="request-type-filter">
                                    <option value="-999" selected>Tất Cả Loại Shop</option>
                                    <!-- Sẽ được điền bởi JavaScript -->
                                </select>
                            </div>
                            <div class="col-md-2" style="display: none;">
                                <button type="button" class="btn btn-primary w-100" id="request-filter-button">
                                    <i class="bx bx-search me-1"></i> Tìm Kiếm
                                </button>
                            </div>
                        </div>

                        <div class="table-responsive mt-4">
                            <table class="table table-hover align-middle table-nowrap mb-0" id="request-table">
                                <thead>
                                    <tr>
                                        <th scope="col">Mã Yêu Cầu</th>
                                        <th scope="col">Thông Tin Shop</th>
                                        <th scope="col">Loại Shop</th>
                                        <th scope="col">Ngày Yêu Cầu</th>
                                        <th scope="col">Trạng Thái</th>
                                        <th scope="col">Thao Tác</th>
                                    </tr>
                                </thead>
                                <tbody id="request-table-body">
                                    <!-- Dữ liệu sẽ được điền bởi JavaScript -->
                                    <tr>
                                        <td colspan="6" class="text-center">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Đang tải...</span>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <div class="row align-items-center mt-4">
                            <div class="col-sm-6">
                                <div id="request-paging-count">Đang tải dữ liệu...</div>
                            </div>
                            <div class="col-sm-6">
                                <ul class="pagination pagination-rounded justify-content-end mb-0" id="request-paging-list">
                                    <li class="page-item" id="request-btn-prev">
                                        <a class="page-link" href="#"><i class="bx bx-chevron-left"></i></a>
                                    </li>
                                    <li class="page-item" id="request-btn-next">
                                        <a class="page-link" href="#"><i class="bx bx-chevron-right"></i></a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Container Fluid -->
</div>
<!-- End Page Content --> 

<script type="module">
    import { BaseService } from "/custom/BaseService.js";
    import createBusinessRegistrationFilter from "/custom/filterBusinessRegistration.js";
    import { SortType } from "/custom/Enum.js";
    import { EnumService } from "/custom/EnumService.js";

    const jwt = null;
    const enumService = new EnumService("http://localhost:5172", jwt);
    const businessRegistrationService = new BaseService(
        "http://localhost:5172/api/BusinessRegistration",
        jwt
    );

    const appShopRequest = {
        filter: new createBusinessRegistrationFilter({
            searchTerm: "",
            sortBy: SortType.Latest,
            page: 1,
            pageSize: 10,
            businessType: -999,
            registrationStatus: -999
        }),
        requestStatuses: {},
        businessTypes: {},
        statisticsData: {
            total: 0,
            pending: 0,
            approved: 0,
            rejected: 0
        },
        
        init: function() {
            new Promise((resolve, reject) => {
                this.loadRequestStatuses();
                this.loadBusinessTypes();
                this.loadSortType();
                this.handleFilterFunction();
                this.handleSearchFunction();
                this.handlePagingFunction();
                resolve();
            })
            .then(() => {
                document.getElementById("request-filter-button").click();
                this.loadStatistics();
            })
            .catch((error) => {
                console.error("Error initializing appShopRequest:", error);
            });
        },
        
        loadRequestStatuses: function() {
            // Load trạng thái yêu cầu vào dropdown
            const statusDropdown = document.getElementById("request-status-filter");
            statusDropdown.innerHTML = "<option value='-999' selected>Tất cả trạng thái</option>";
            
            enumService.getRegistrationStatuses()
                .then((data) => {
                    if (data) {
                        Object.keys(data).forEach((key) => {
                            const option = document.createElement("option");
                            option.value = key;
                            option.textContent = data[key];
                            statusDropdown.appendChild(option);
                            this.requestStatuses[key] = data[key];
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving registration statuses:", error);
                    // Thêm các giá trị mặc định nếu API thất bại
                    const defaultStatuses = [
                        { value: "1", text: "Chờ Duyệt" },
                        { value: "2", text: "Đã Duyệt" },
                        { value: "3", text: "Từ Chối" }
                    ];
                    
                    defaultStatuses.forEach(status => {
                        const option = document.createElement("option");
                        option.value = status.value;
                        option.textContent = status.text;
                        statusDropdown.appendChild(option);
                        this.requestStatuses[status.value] = status.text;
                    });
                });
        },
        
        loadBusinessTypes: function() {
            // Load loại shop vào dropdown
            const typeDropdown = document.getElementById("request-type-filter");
            typeDropdown.innerHTML = "<option value='-999' selected>Tất cả loại shop</option>";
            
            enumService.getShopTypes()
                .then((data) => {
                    if (data) {
                        Object.keys(data).forEach((key) => {
                            const option = document.createElement("option");
                            option.value = key;
                            option.textContent = data[key];
                            typeDropdown.appendChild(option);
                            this.businessTypes[key] = data[key];
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving business types:", error);
                    // Thêm các giá trị mặc định nếu API thất bại
                    const defaultTypes = [
                        { value: "-999", text: "Không thể tải dữ liệu" },
                    ];
                    
                    defaultTypes.forEach(type => {
                        const option = document.createElement("option");
                        option.value = type.value;
                        option.textContent = type.text;
                        typeDropdown.appendChild(option);
                        this.businessTypes[type.value] = type.text;
                    });
                });
        },
        
        loadSortType: function() {
            // Không cần load sort type vì đã xóa modal
        },
        
        loadStatistics: function() {
            
        },
        
        handleFilterFunction() {
            const filterButton = document.getElementById("request-filter-button");
            let _this = this;
            
            filterButton.addEventListener("click", function() {
                _this.applyFilter();
            });
        },
        
        applyFilter: function() {
            let _this = this;
            const statusValue = document.getElementById("request-status-filter").value;
            const typeValue = document.getElementById("request-type-filter").value;
            const searchValue = document.getElementById("request-search-input").value;
            
            // Cập nhật filter từ form chính
            if (statusValue && statusValue !== "-999") {
                _this.filter.registrationStatus = parseInt(statusValue);
            } else {
                _this.filter.registrationStatus = -999;
            }
            
            if (typeValue && typeValue !== "-999") {
                _this.filter.businessType = parseInt(typeValue);
            } else {
                _this.filter.businessType = -999;
            }
            
            _this.filter.searchTerm = searchValue;
            
            // Gọi API để lấy danh sách yêu cầu theo bộ lọc
            businessRegistrationService.find(_this.filter)
                .then((data) => {
                    console.log("Request data:", data);
                    if (data && data.success) {
                        const items = data.data || [];
                        _this.reloadTable(items);
                        
                        // Cập nhật phân trang
                        const start = (_this.filter.page - 1) * _this.filter.pageSize + 1;
                        const end = start + items.length - 1;
                        const totalCount = data.totalCount || 0;
                        
                        document.getElementById("request-paging-count").textContent = 
                            `Hiển thị ${start} - ${end}/${totalCount} yêu cầu`;
                        
                        // Cập nhật danh sách phân trang
                        const pagingList = document.getElementById("request-paging-list");
                        pagingList.innerHTML = `
                            <li class="page-item" id="request-btn-prev">
                                <a href="#" class="page-link"><i class="bx bx-chevron-left"></i></a>
                            </li>`;
                        
                        const totalPages = Math.ceil(totalCount / _this.filter.pageSize);
                        
                        for (let i = 1; i <= totalPages; i++) {
                            const li = document.createElement("li");
                            li.classList.add("page-item");
                            
                            if (i === _this.filter.page) {
                                li.classList.add("active");
                            }
                            
                            li.addEventListener("click", () => {
                                _this.filter.page = i;
                                _this.applyFilter();
                            });
                            
                            const a = document.createElement("a");
                            a.classList.add("page-link");
                            a.textContent = i;
                            a.href = "#";
                            
                            li.appendChild(a);
                            pagingList.appendChild(li);
                        }
                        
                        pagingList.innerHTML += `
                            <li class="page-item" id="request-btn-next">
                                <a href="#" class="page-link"><i class="bx bx-chevron-right"></i></a>
                            </li>`;
                        
                        // Vô hiệu hóa nút Prev nếu đang ở trang đầu tiên
                        if (_this.filter.page === 1) {
                            document.getElementById("request-btn-prev").classList.add("disabled");
                        }
                        
                        // Vô hiệu hóa nút Next nếu đang ở trang cuối cùng
                        if (_this.filter.page === totalPages) {
                            document.getElementById("request-btn-next").classList.add("disabled");
                        }
                    } else {
                        // Hiển thị thông báo lỗi
                        document.getElementById("request-table-body").innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center text-danger">
                                    Không thể tải dữ liệu yêu cầu. Vui lòng thử lại sau.
                                </td>
                            </tr>`;
                        
                        document.getElementById("request-paging-count").textContent = "Không có dữ liệu";
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving business registrations:", error);
                    document.getElementById("request-table-body").innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center text-danger">
                                Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.
                            </td>
                        </tr>`;
                    
                    document.getElementById("request-paging-count").textContent = "Đã xảy ra lỗi";
                });
        },
        
        reloadTable(items) {
            const tableBody = document.getElementById("request-table-body");
            tableBody.innerHTML = "";
            
            if (!items || items.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center">
                            Không tìm thấy yêu cầu nào phù hợp với điều kiện tìm kiếm.
                        </td>
                    </tr>`;
                return;
            }
            console.log(this.requestStatuses);
            console.log(this.businessTypes);
            items.forEach((request) => {
                // Tạo một hàng mới cho mỗi yêu cầu
                const row = document.createElement("tr");
                
                // Định dạng trạng thái yêu cầu
                let statusClass = "";
                let statusText = this.requestStatuses[request.registrationStatus] || "Không xác định";
                
                switch(parseInt(request.registrationStatus)) {
                    case 4: // Chờ Duyệt
                        statusClass = "bg-warning";
                        break;
                    case 1: // Đã Duyệt
                        statusClass = "bg-success";
                        break;
                    case 2: // Từ Chối
                        statusClass = "bg-danger";
                        break;
                    case 3: // Yêu cầu bổ sung / cập nhật
                        statusClass = "bg-info";
                        break;
                    default:
                        statusClass = "bg-secondary";
                }
                
                // Lấy thông tin về yêu cầu
                let requestCode = request.code || `#${request.id}`;
                let shopName = request.businessName || 'Không có thông tin tên shop';
                let ownerName = request.user?.fullName || 'Không có thông tin chủ sở hữu';
                let requestDate = new Date(request.createdAt).toLocaleDateString('vi-VN');
                let businessType = this.businessTypes[request.businessType] || 'Không xác định';
                let ownerAvatar = request.user?.ImageUrl || '/custom/default.jpg';
                
                // Tạo nội dung hàng
                row.innerHTML = `
                    <td>${requestCode}</td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0 me-3">
                                <img src="${ownerAvatar}" alt="" class="avatar-sm rounded" onerror="this.src='/custom/default.jpg'">
                            </div>
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${shopName}</h6>
                                <p class="text-muted mb-0">${ownerName}</p>
                            </div>
                        </div>
                    </td>
                    <td>${businessType}</td>
                    <td>${requestDate}</td>
                    <td><span class="badge ${statusClass}">${statusText}</span></td>
                    <td>
                        <div class="dropdown">
                            <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="bx bx-dots-horizontal-rounded"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="/Admin/ShopRequestDetail?id=${request.id}"><i class="bx bx-detail me-1"></i>Chi Tiết</a></li>
                                ${request.status === 1 ? `
                                ` : ''}
                            </ul>
                        </div>
                    </td>
                `;
                
                // Thêm hàng vào bảng
                tableBody.appendChild(row);
            });
            
            // Thêm event listeners cho các nút trong bảng
            this.addTableEventListeners();
        },
        
        addTableEventListeners() {
            let _this = this;
            
            // Event listener cho nút duyệt yêu cầu
            document.querySelectorAll('.approve-request').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const requestId = button.getAttribute('data-id');
                    
                    if (confirm('Bạn có chắc chắn muốn duyệt yêu cầu này?')) {
                        businessRegistrationService.update(requestId, { status: 2 })
                            .then(response => {
                                if (response.success) {
                                    alert('Duyệt yêu cầu thành công!');
                                    _this.applyFilter();
                                    _this.loadStatistics();
                                } else {
                                    alert('Duyệt yêu cầu thất bại: ' + response.message);
                                }
                            })
                            .catch(error => {
                                console.error('Lỗi khi duyệt yêu cầu:', error);
                                alert('Đã xảy ra lỗi khi duyệt yêu cầu. Vui lòng thử lại.');
                            });
                    }
                });
            });
            
            // Event listener cho nút từ chối yêu cầu
            document.querySelectorAll('.reject-request').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const requestId = button.getAttribute('data-id');
                    
                    if (confirm('Bạn có chắc chắn muốn từ chối yêu cầu này?')) {
                        businessRegistrationService.update(requestId, { status: 3 })
                            .then(response => {
                                if (response.success) {
                                    alert('Từ chối yêu cầu thành công!');
                                    _this.applyFilter();
                                    _this.loadStatistics();
                                } else {
                                    alert('Từ chối yêu cầu thất bại: ' + response.message);
                                }
                            })
                            .catch(error => {
                                console.error('Lỗi khi từ chối yêu cầu:', error);
                                alert('Đã xảy ra lỗi khi từ chối yêu cầu. Vui lòng thử lại.');
                            });
                    }
                });
            });
        },
        
        handleSearchFunction() {
            const _this = this;
            
            // Sự kiện khi nhập vào ô tìm kiếm
            document.getElementById("request-search-input").addEventListener("input", function() {
                _this.filter.searchTerm = this.value;
            });
            
            // Sự kiện khi nhấn Enter trong ô tìm kiếm
            document.getElementById("request-search-input").addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    _this.filter.page = 1; // Reset về trang 1
                    _this.applyFilter();
                    e.preventDefault();
                }
            });
            
            // Sự kiện khi thay đổi dropdown trạng thái
            document.getElementById("request-status-filter").addEventListener("change", function() {
                _this.filter.registrationStatus = this.value !== "-999" ? parseInt(this.value) : -999;
                _this.filter.page = 1; // Reset về trang 1
                _this.applyFilter();
            });
            
            // Sự kiện khi thay đổi dropdown loại shop
            document.getElementById("request-type-filter").addEventListener("change", function() {
                _this.filter.businessType = this.value !== "-999" ? parseInt(this.value) : -999;
                _this.filter.page = 1; // Reset về trang 1
                _this.applyFilter();
            });
        },
        
        handlePagingFunction() {
            const _this = this;
            
            // Sự kiện cho nút Previous
            document.addEventListener('click', function(e) {
                if (e.target.closest('#request-btn-prev') && !e.target.closest('#request-btn-prev').classList.contains('disabled')) {
                    e.preventDefault();
                    if (_this.filter.page > 1) {
                        _this.filter.page--;
                        _this.applyFilter();
                    }
                }
            });
            
            // Sự kiện cho nút Next
            document.addEventListener('click', function(e) {
                if (e.target.closest('#request-btn-next') && !e.target.closest('#request-btn-next').classList.contains('disabled')) {
                    e.preventDefault();
                    _this.filter.page++;
                    _this.applyFilter();
                }
            });
        }
    };

    // Khởi động ứng dụng
    appShopRequest.init();
 </script>